{{- if not .Values.db.persistence.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fastapi-ddd-template.fullname" . }}-db
  labels:
    {{- include "fastapi-ddd-template.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- $ctx := dict "component" "db" | merge (dict) -}}
      {{- $_ := set $ctx "Chart" .Chart -}}
      {{- $_ := set $ctx "Release" .Release -}}
      {{- $_ := set $ctx "Values" .Values -}}
      {{- $_ := set $ctx "Capabilities" .Capabilities -}}
      {{- include "fastapi-ddd-template.selectorLabels" $ctx | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "fastapi-ddd-template.labels" . | nindent 8 }}
        app.kubernetes.io/component: "db"
    spec:
      automountServiceAccountToken: false
      containers:
        - name: db
          image: "{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}"
          imagePullPolicy: {{ .Values.db.image.pullPolicy }}
          ports: [{ name: psql, containerPort: {{ .Values.db.port }} }]

          env:
          {{- $cfgName := (include "fastapi-ddd-template.fullname" .) | printf "%s-config" -}}
          {{- range $k := .Values.db.envFromConfigKeys }}
            - name: {{ $k }}
              valueFrom: { configMapKeyRef: { name: {{ $cfgName | quote }}, key: {{ $k | quote }} } }
          {{- end }}
            - name: POSTGRES_USER
              valueFrom: { configMapKeyRef: { name: {{ $cfgName | quote }}, key: "DB_ADMIN" } }
            - name: POSTGRES_DB
              valueFrom: { configMapKeyRef: { name: {{ $cfgName | quote }}, key: "DB_PATH" } }
            - name: POSTGRES_PASSWORD_FILE
              value: /run/secrets/{{ .Values.db.adminSecretPath }}
          volumeMounts:
            - { name: pgdata, mountPath: /var/lib/postgresql/data }
            - { name: db-secrets, mountPath: /run/secrets, readOnly: true }
          readinessProbe:
            exec: { command: ["bash","-lc","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p {{ .Values.db.port }}"] }
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            exec: { command: ["bash","-lc","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p {{ .Values.db.port }}"] }
            initialDelaySeconds: 20
            periodSeconds: 20
          resources:
            {{- toYaml .Values.db.resources | nindent 12 }}
      volumes:
        - name: pgdata
          emptyDir: {}
        - name: db-secrets
          secret:
            secretName: {{ .Values.secrets.existingName }}
            items:
              - { key: DB_ADMIN_SECRET, path: {{ .Values.db.adminSecretPath }} }
{{- end }}
